defaults:
  run:
    shell: "bash"

name: "CI"

on:
  push:
    branches: ["master"]
    tags: ["v*"]
  pull_request:
    branches: ["master"]

env:
  DEV_PYTHON_VERSION: "3.10.2"
  # To check latest versions run,
  #
  # ```bash
  # pip-latest-release coveralls poetry twine
  # ```
  #
  COVERALLS_VERSION: "3.3.1"
  POETRY_VERSION: "1.1.13"
  TWINE_VERSION: "3.8.0"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Install Python"
        uses: "actions/setup-python@v2.3.2"
        with:
          python-version: "${{ env.DEV_PYTHON_VERSION }}"

      - name: "Install poetry"
        uses: "snok/install-poetry@v1.3.0"
        with:
          version: "${{ env.POETRY_VERSION }}"

      - name: "Install package"
        run: "poetry install --no-dev"

      - name: "Import package"
        run: ".venv/bin/python3 -c 'from pre_commit_run_hook_entry.cli import main'"

  test:
    name: "Python ${{ matrix.python-version }}"

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Install Python"
        uses: "actions/setup-python@v2.3.2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install poetry"
        uses: "snok/install-poetry@v1.3.0"
        with:
          version: "${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        uses: "actions/cache@v2.1.7"
        with:
          path: ".venv"
          key: "venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}"

      - name: "Install package"
        run: "poetry install"

      - name: "Cache mypy"
        uses: "actions/cache@v2.1.7"
        with:
          path: ".mypy_cache"
          key: "mypy-${{ matrix.python-version }}"

      - name: "Run pre-commit"
        uses: "pre-commit/action@v2.0.3"
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Run tests"
        run: ".venv/bin/python3 -m pytest"
        env:
          STAGE: "test"

      - name: "Send report to coveralls"
        if: "${{ startsWith(env.DEV_PYTHON_VERSION, matrix.python-version) }}"
        run: |
          set -euo pipefail

          python3 -m pip install --no-cache-dir coveralls==${{ env.COVERALLS_VERSION }}
          python3 -m coveralls --source=github
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  package:
    needs: "test"
    name: "Build & deploy package"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Install Python"
        uses: "actions/setup-python@v2.3.2"
        with:
          python-version: "${{ env.DEV_PYTHON_VERSION }}"

      - name: "Install poetry"
        uses: "snok/install-poetry@v1.3.0"
        with:
          version: "${{ env.POETRY_VERSION }}"

      - name: "Build package"
        run: "poetry build"

      - name: "Check package"
        run: |
          set -euo pipefail

          python -m pip install --no-cache-dir twine==${{ env.TWINE_VERSION }}
          python -m twine check dist/*

      - name: "Publish package"
        if: "${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/') }}"
        uses: "pypa/gh-action-pypi-publish@v1.3.1"
        with:
          user: "${{ secrets.PYPI_USERNAME }}"
          password: "${{ secrets.PYPI_PASSWORD }}"

  release:
    if: "${{ startsWith(github.ref, 'refs/tags/') }}"
    needs: "package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.4.0"

      - name: "Fetch git data"
        run: |
          set -e
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          git fetch --prune --unshallow

      - id: "release-info"
        name: "Prepare release info"
        run: |
          set -e

          tag_name=${GITHUB_REF:10}
          echo "::set-output name=tag_name::${tag_name}"

          subject=$(git tag -l --format="%(subject)" ${tag_name})
          echo "::set-output name=subject::${subject}"

          body=$(git tag -l --format="%(body)" ${tag_name})
          # Preserve multiline strings as per
          # https://github.community/t/set-output-truncates-multiline-strings/16852/5
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::${body}"

          prerelease=false
          if [ -z "${tag_name##*a*}" -o -z "${tag_name##*b*}" -o -z "${tag_name##*rc*}" ]; then
            prerelease=true
          fi
          echo "::set-output name=prerelease::${prerelease}"

      - name: "Create new release"
        uses: "actions/create-release@v1.1.3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: "${{ steps.release-info.outputs.tag_name }}"
          release_name: "${{ steps.release-info.outputs.subject }}"
          body: "${{ steps.release-info.outputs.body }}"
          prerelease: "${{ steps.release-info.outputs.prerelease }}"
